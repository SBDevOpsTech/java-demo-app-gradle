name: CI/CD Pipeline (Development)

on:
  push:
    branches:
      - main

env:
  ACR_IMAGE: ${{ vars.ACR_NAME }}.azurecr.io/java-demoapp:latest

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Install Docker
    - name: Install Docker
      run: |
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt remove $pkg; done
        sudo apt update && sudo apt install ca-certificates curl && sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update && sudo apt install docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo usermod -aG docker $USER

    # Step 4: Build Docker image
    - name: Build Docker Image
      run: |
        az acr login --name ${{ vars.ACR_NAME }}
        docker build -t $ACR_IMAGE .

    # Step 5: Push Docker image to Azure Container Registry
    - name: Push Docker Image to ACR
      run: |
        docker push $ACR_IMAGE

  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: development
    steps:
    # Step 1: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
      id: install

    # Step 2: Get AKS kubeconfig
    - name: Get AKS Kubeconfig
      run: |
        az aks get-credentials --resource-group ${{ vars.AKS_RG_NAME }} --name ${{ vars.AKS_NAME }} --overwrite-existing

    # Step 3: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        kubectl get pods -A